# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'WIN_Customer.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from enum import Enum
from PyQt5 import QtCore, QtWidgets, QtGui
from src.app.model.customer.CustomerModel import CustomerModel
from src.app.model.customer.CustomerModelCollection import CustomerModelCollection


class WIN_Customer(QtWidgets.QMainWindow):

    onCustomerNew = QtCore.pyqtSignal()
    onCustomerCreate = QtCore.pyqtSignal(CustomerModel)
    onCustomerUpdate = QtCore.pyqtSignal(CustomerModel)
    onCustomerDelete = QtCore.pyqtSignal(CustomerModel)
    onCustomerSelect = QtCore.pyqtSignal(int)
    state = Enum("state", ["init", "inSelection", "inEdition", "inCreation"])

    def __init__(self, parent: QtWidgets.QMainWindow) -> None:
        super().__init__(parent)
    
        self.customers = CustomerModelCollection()
        self.customerSelected: CustomerModel = CustomerModel()
        WIN_Customer.state = WIN_Customer.state.init

        self._setupUi()

    def selectCustomer(self, customerSelected: CustomerModel):        
        self.customerSelected = customerSelected
        self._setToSelectState()

    def editCustomer(self, customerSelected: CustomerModel):
        self.customerSelected = customerSelected
        self._setToEditState()

    def refreshCustomers(self, customers: CustomerModelCollection):
        self.customers = customers
        self._displayCustomersTable()
        self._setToInitialState()


    def connectEvents(self):

        self.BTN_New.clicked.connect(self._emitNewCustomer)
        self.BTN_Edit.clicked.connect(self._emitEditCustomer)
        self.BTN_Save.clicked.connect(self._emitSaveCustomer)
        self.BTN_Delete.clicked.connect(self._emitDeleteCustomer)
        self.BTN_Cancel.clicked.connect(self._emitCancel)

        self.tableView.clicked.connect(self._emitCustomerSelect)

        self.EDT_ID.returnPressed.connect(self._emitSaveCustomer)
        self.EDT_Name.returnPressed.connect(self._emitSaveCustomer)

    def keyPressEvent(self, e: QtGui.QKeyEvent):

        if e.key() == QtCore.Qt.Key.Key_Escape:
            if WIN_Customer.state == WIN_Customer.state.inEdition:
                self._setToSelectState()
                return
            
            self._setToInitialState()
            

        if e.key() == QtCore.Qt.Key.Key_N:
            self._emitNewCustomer()

        if e.key() == QtCore.Qt.Key.Key_Control + QtCore.Qt.Key.Key_S:
            self._emitSaveCustomer()

        if e.key() == QtCore.Qt.Key.Key_Space:
            if WIN_Customer.state == WIN_Customer.state.init:
                self._emitNewCustomer()
                return
            
            self._emitEditCustomer()

        if e.key() == QtCore.Qt.Key.Key_Delete:
            self._emitDeleteCustomer()

        

    def _setupUi(self):
        self.setObjectName("Customers")
        self.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(10, 140, 771, 411))
        self.tableView.setObjectName("tableView")
        self.tableModel = QtGui.QStandardItemModel()
        self.tableView.setModel(self.tableModel)
        
        self.BTN_New = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_New.setGeometry(QtCore.QRect(10, 80, 93, 28))
        self.BTN_New.setObjectName("BTN_New")
        self.BTN_Edit = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_Edit.setGeometry(QtCore.QRect(120, 80, 93, 28))
        self.BTN_Edit.setObjectName("BTN_Edit")
        self.BTN_Delete = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_Delete.setGeometry(QtCore.QRect(230, 80, 93, 28))
        self.BTN_Delete.setObjectName("BTN_Delete")
        self.BTN_Save = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_Save.setGeometry(QtCore.QRect(340, 80, 93, 28))
        self.BTN_Save.setObjectName("BTN_Save")
        self.BTN_Cancel = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_Cancel.setGeometry(QtCore.QRect(450, 80, 93, 28))
        self.BTN_Cancel.setObjectName("BTN_Cancel")

        self.EDT_Name = QtWidgets.QLineEdit(self.centralwidget)
        self.EDT_Name.setGeometry(QtCore.QRect(80, 30, 261, 22))
        self.EDT_Name.setObjectName("EDT_Name")
        self.EDT_ID = QtWidgets.QLineEdit(self.centralwidget)
        self.EDT_ID.setGeometry(QtCore.QRect(470, 30, 261, 22))
        self.EDT_ID.setObjectName("EDT_ID")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 30, 55, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(400, 30, 55, 16))
        self.label_2.setObjectName("label_2")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self._retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self._setToInitialState()
        self.setFocus()

        

    def _retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Customers", "MainWindow"))

        self.BTN_New.setText(_translate("Customers", "Nuevo"))
        self.BTN_Edit.setText(_translate("Customers", "Editar"))
        self.BTN_Save.setText(_translate("Customers", "Guardar"))
        self.BTN_Delete.setText(_translate("Customers", "Eliminar"))
        self.BTN_Cancel.setText(_translate("Customers", "Cancelar"))
        self.label.setText(_translate("Customers", "Nombre"))
        self.label_2.setText(_translate("Customers", "ID"))

    def _emitCustomerSelect(self, index: QtCore.QModelIndex):
        self.onCustomerSelect.emit(index.row())

    def _emitNewCustomer(self):
        self._setToNewCustomerState()

    def _emitEditCustomer(self):
        self._setToEditState()

    def _emitSaveCustomer(self):
        
        if WIN_Customer.state == WIN_Customer.state.inCreation: 
            customer = CustomerModel()
            customer.name = self.EDT_Name.text()
            customer.identification = self.EDT_ID.text()

            self.onCustomerCreate.emit(customer)
            return
        
        
        self.customerSelected.name = self.EDT_Name.text()
        self.customerSelected.identification = self.EDT_ID.text()

        self.onCustomerUpdate.emit(self.customerSelected)


    def _emitDeleteCustomer(self):
        self.onCustomerDelete.emit(self.customerSelected)
    
    def _emitCancel(self): 
        self._setToInitialState()


    def _displayCustomersTable(self):
        self.tableModel.setRowCount(self.customers.count()) 

        self.tableModel.setColumnCount(2)
        self.tableModel.setHorizontalHeaderLabels(["ID", "Nombre"])

        row = 0

        def customersCb(customer: CustomerModel):
            nonlocal row
            
            identificationItem = QtGui.QStandardItem(customer.identification)
            identificationItem.setEditable(False)
            self.tableModel.setItem(row, 0, identificationItem)

            nameItem = QtGui.QStandardItem(customer.name)
            nameItem.setEditable(False)
            self.tableModel.setItem(row, 1, nameItem)

            row += 1

        self.customers.forEach(customersCb)

        

    def _setToInitialState(self):

        self.tableView.setEnabled(True)

        self.BTN_New.setEnabled(True)
        self.BTN_Edit.setEnabled(False)
        self.BTN_Save.setEnabled(False)
        self.BTN_Delete.setEnabled(False)
        self.BTN_Cancel.setEnabled(False)
        
        self.EDT_ID.setReadOnly(True)
        self.EDT_Name.setReadOnly(True)
        self.EDT_Name.setText("")
        self.EDT_ID.setText("")

        WIN_Customer.state = WIN_Customer.state.init
        

    def _setToNewCustomerState(self):

        self.tableView.setEnabled(False)

        self.BTN_New.setEnabled(False)
        self.BTN_Edit.setEnabled(False)
        self.BTN_Save.setEnabled(True)
        self.BTN_Delete.setEnabled(False)
        self.BTN_Cancel.setEnabled(True)

        
        self.EDT_ID.setReadOnly(False)
        self.EDT_Name.setReadOnly(False)
        self.EDT_Name.setText("")
        self.EDT_ID.setText("")
        self.EDT_Name.setFocus()

        WIN_Customer.state = WIN_Customer.state.inCreation

    def _setToEditState(self):

        self.tableView.setEnabled(False)

        self.BTN_New.setEnabled(False)
        self.BTN_Edit.setEnabled(False)
        self.BTN_Save.setEnabled(True)
        self.BTN_Delete.setEnabled(False)
        self.BTN_Cancel.setEnabled(True)

        self.EDT_ID.setReadOnly(False)
        self.EDT_Name.setReadOnly(False)
        self.EDT_Name.setText(self.customerSelected.name)
        self.EDT_ID.setText(self.customerSelected.identification)
        self.EDT_Name.setFocus()

        WIN_Customer.state = WIN_Customer.state.inEdition
    
    def _setToSelectState(self):
        
        self.BTN_New.setEnabled(True)
        self.BTN_Edit.setEnabled(True)
        self.BTN_Save.setEnabled(False)
        self.BTN_Delete.setEnabled(True)
        self.BTN_Cancel.setEnabled(False)

        self.EDT_ID.setReadOnly(True)
        self.EDT_Name.setReadOnly(True)
        self.EDT_Name.setText(self.customerSelected.name)
        self.EDT_ID.setText(self.customerSelected.identification)

        WIN_Customer.state = WIN_Customer.state.inSelection
